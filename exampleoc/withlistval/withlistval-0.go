// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package withlistval is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: (devel))
using the following YANG input files:
  - ../pathgen/testdata/yang/openconfig-simple.yang
  - ../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package withlistval

import (
	oc "github.com/openconfig/ygnmi/exampleoc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// ModelPath represents the /openconfig-withlistval/model YANG schema element.
type ModelPath struct {
	*ygnmi.NodePath
}

// ModelPathAny represents the wildcard version of the /openconfig-withlistval/model YANG schema element.
type ModelPathAny struct {
	*ygnmi.NodePath
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyAny() *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyAny() *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	return ps
}

// WithKey1 sets Model_MultiKeyPathAny's key "key1" to the specified value.
// Key1: uint32
func (n *Model_MultiKeyPathAny) WithKey1(Key1 uint32) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key1", Key1)
	return n
}

// WithKey2 sets Model_MultiKeyPathAny's key "key2" to the specified value.
// Key2: uint64
func (n *Model_MultiKeyPathAny) WithKey2(Key2 uint64) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key2", Key2)
	return n
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPath {
	ps := &Model_MultiKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *ModelPathAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPathAny {
	ps := &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyMap() *Model_MultiKeyPathMap {
	ps := &Model_MultiKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b/multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyMap() *Model_MultiKeyPathMapAny {
	ps := &Model_MultiKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c/no-key"
//	Path from root:       "/model/c/no-key"
func (n *ModelPath) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c/no-key"
//	Path from root:       "/model/c/no-key"
func (n *ModelPathAny) NoKeyAny() *Model_NoKeyPathAny {
	ps := &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyAny() *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyAny() *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *ModelPath) SingleKey(Key string) *Model_SingleKeyPath {
	ps := &Model_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *ModelPathAny) SingleKey(Key string) *Model_SingleKeyPathAny {
	ps := &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyMap() *Model_SingleKeyPathMap {
	ps := &Model_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a/single-key"
//	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyMap() *Model_SingleKeyPathMapAny {
	ps := &Model_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *ModelPath) State() ygnmi.SingletonQuery[*oc.Model] {
	return ygnmi.NewSingletonQuery[*oc.Model](
		"Model",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *ModelPathAny) State() ygnmi.WildcardQuery[*oc.Model] {
	return ygnmi.NewWildcardQuery[*oc.Model](
		"Model",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ModelPath) Config() ygnmi.ConfigQuery[*oc.Model] {
	return ygnmi.NewConfigQuery[*oc.Model](
		"Model",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *ModelPathAny) Config() ygnmi.WildcardQuery[*oc.Model] {
	return ygnmi.NewWildcardQuery[*oc.Model](
		"Model",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_MultiKey_Key1Path represents the /openconfig-withlistval/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_MultiKey_Key1PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key1"
//	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKey_Key1Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"Model_MultiKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Model_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key1"
//	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKey_Key1PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Model_MultiKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Model_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key1"
//	Path from root:       "/model/b/multi-key/config/key1"
func (n *Model_MultiKey_Key1Path) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"Model_MultiKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Model_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key1"
//	Path from root:       "/model/b/multi-key/config/key1"
func (n *Model_MultiKey_Key1PathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"Model_MultiKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.Model_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_MultiKey_Key2Path represents the /openconfig-withlistval/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_MultiKey_Key2PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key2"
//	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKey_Key2Path) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"Model_MultiKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Model_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key2"
//	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKey_Key2PathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Model_MultiKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Model_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key2"
//	Path from root:       "/model/b/multi-key/config/key2"
func (n *Model_MultiKey_Key2Path) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"Model_MultiKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Model_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key2"
//	Path from root:       "/model/b/multi-key/config/key2"
func (n *Model_MultiKey_Key2PathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"Model_MultiKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.Model_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_MultiKeyPath represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type Model_MultiKeyPath struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key YANG schema element.
type Model_MultiKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathMap represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type Model_MultiKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key YANG schema element.
type Model_MultiKeyPathMapAny struct {
	*ygnmi.NodePath
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key1"
//	Path from root:       "/model/b/multi-key/*/key1"
func (n *Model_MultiKeyPath) Key1() *Model_MultiKey_Key1Path {
	ps := &Model_MultiKey_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key1"
//	Path from root:       "/model/b/multi-key/*/key1"
func (n *Model_MultiKeyPathAny) Key1() *Model_MultiKey_Key1PathAny {
	ps := &Model_MultiKey_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key2"
//	Path from root:       "/model/b/multi-key/*/key2"
func (n *Model_MultiKeyPath) Key2() *Model_MultiKey_Key2Path {
	ps := &Model_MultiKey_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key2"
//	Path from root:       "/model/b/multi-key/*/key2"
func (n *Model_MultiKeyPathAny) Key2() *Model_MultiKey_Key2PathAny {
	ps := &Model_MultiKey_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPath) State() ygnmi.SingletonQuery[*oc.Model_MultiKey] {
	return ygnmi.NewSingletonQuery[*oc.Model_MultiKey](
		"Model_MultiKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathAny) State() ygnmi.WildcardQuery[*oc.Model_MultiKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_MultiKey](
		"Model_MultiKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPath) Config() ygnmi.ConfigQuery[*oc.Model_MultiKey] {
	return ygnmi.NewConfigQuery[*oc.Model_MultiKey](
		"Model_MultiKey",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathAny) Config() ygnmi.WildcardQuery[*oc.Model_MultiKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_MultiKey](
		"Model_MultiKey",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathMap) State() ygnmi.SingletonQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey] {
	return ygnmi.NewSingletonQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey](
		"Model",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Model_MultiKey_Key]*oc.Model_MultiKey, bool) {
			ret := gs.(*oc.Model).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:b"},
			PostRelPath: []string{"openconfig-withlistval:multi-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathMapAny) State() ygnmi.WildcardQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey] {
	return ygnmi.NewWildcardQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey](
		"Model",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Model_MultiKey_Key]*oc.Model_MultiKey, bool) {
			ret := gs.(*oc.Model).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:b"},
			PostRelPath: []string{"openconfig-withlistval:multi-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathMap) Config() ygnmi.ConfigQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey] {
	return ygnmi.NewConfigQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey](
		"Model",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Model_MultiKey_Key]*oc.Model_MultiKey, bool) {
			ret := gs.(*oc.Model).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:b"},
			PostRelPath: []string{"openconfig-withlistval:multi-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_MultiKeyPathMapAny) Config() ygnmi.WildcardQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey] {
	return ygnmi.NewWildcardQuery[map[oc.Model_MultiKey_Key]*oc.Model_MultiKey](
		"Model",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.Model_MultiKey_Key]*oc.Model_MultiKey, bool) {
			ret := gs.(*oc.Model).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:b"},
			PostRelPath: []string{"openconfig-withlistval:multi-key"},
		},
	)
}

// Model_NoKeyPath represents the /openconfig-withlistval/model/c/no-key YANG schema element.
type Model_NoKeyPath struct {
	*ygnmi.NodePath
}

// Model_NoKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key YANG schema element.
type Model_NoKeyPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKeyPath) State() ygnmi.SingletonQuery[*oc.Model_NoKey] {
	return ygnmi.NewSingletonQuery[*oc.Model_NoKey](
		"Model_NoKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKeyPathAny) State() ygnmi.WildcardQuery[*oc.Model_NoKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_NoKey](
		"Model_NoKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_NoKey_Foo_KeyPath represents the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type Model_NoKey_Foo_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_NoKey_Foo_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type Model_NoKey_Foo_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_Foo_KeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_Foo_KeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_NoKey_Foo_ValuePath represents the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type Model_NoKey_Foo_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_NoKey_Foo_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type Model_NoKey_Foo_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_Foo_ValuePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_Foo_ValuePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_NoKey_Foo",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_NoKey_Foo).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_NoKey_Foo) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_NoKey_FooPath represents the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type Model_NoKey_FooPath struct {
	*ygnmi.NodePath
}

// Model_NoKey_FooPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type Model_NoKey_FooPathAny struct {
	*ygnmi.NodePath
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_FooPath) Key() *Model_NoKey_Foo_KeyPath {
	ps := &Model_NoKey_Foo_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *Model_NoKey_FooPathAny) Key() *Model_NoKey_Foo_KeyPathAny {
	ps := &Model_NoKey_Foo_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_FooPath) Value() *Model_NoKey_Foo_ValuePath {
	ps := &Model_NoKey_Foo_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *Model_NoKey_FooPathAny) Value() *Model_NoKey_Foo_ValuePathAny {
	ps := &Model_NoKey_Foo_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKey_FooPath) State() ygnmi.SingletonQuery[*oc.Model_NoKey_Foo] {
	return ygnmi.NewSingletonQuery[*oc.Model_NoKey_Foo](
		"Model_NoKey_Foo",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_NoKey_FooPathAny) State() ygnmi.WildcardQuery[*oc.Model_NoKey_Foo] {
	return ygnmi.NewWildcardQuery[*oc.Model_NoKey_Foo](
		"Model_NoKey_Foo",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKey_KeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"Model_SingleKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKey_KeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *Model_SingleKey_KeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *Model_SingleKey_KeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.Model_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_SingleKey_ValuePath represents the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type Model_SingleKey_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// Model_SingleKey_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type Model_SingleKey_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *Model_SingleKey_ValuePath) State() ygnmi.SingletonQuery[int64] {
	return ygnmi.NewSingletonQuery[int64](
		"Model_SingleKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state/value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *Model_SingleKey_ValuePathAny) State() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *Model_SingleKey_ValuePath) Config() ygnmi.ConfigQuery[int64] {
	return ygnmi.NewConfigQuery[int64](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config/value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *Model_SingleKey_ValuePathAny) Config() ygnmi.WildcardQuery[int64] {
	return ygnmi.NewWildcardQuery[int64](
		"Model_SingleKey",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.Model_SingleKey).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Model_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type Model_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/*/key"
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	ps := &Model_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/key"
//	Path from root:       "/model/a/single-key/*/key"
func (n *Model_SingleKeyPathAny) Key() *Model_SingleKey_KeyPathAny {
	ps := &Model_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists/ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *Model_SingleKeyPath) OrderedListMap() *Model_SingleKey_OrderedListPathMap {
	ps := &Model_SingleKey_OrderedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists/ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *Model_SingleKeyPathAny) OrderedListMap() *Model_SingleKey_OrderedListPathMapAny {
	ps := &Model_SingleKey_OrderedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a/single-key"
//	Path from root:       "/model/a/single-key/inner-a/single-key"
func (n *Model_SingleKeyPath) SingleKeyMap() *Model_SingleKey_SingleKeyPathMap {
	ps := &Model_SingleKey_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a/single-key"
//	Path from root:       "/model/a/single-key/inner-a/single-key"
func (n *Model_SingleKeyPathAny) SingleKeyMap() *Model_SingleKey_SingleKeyPathMapAny {
	ps := &Model_SingleKey_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/*/value"
func (n *Model_SingleKeyPath) Value() *Model_SingleKey_ValuePath {
	ps := &Model_SingleKey_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "*/value"
//	Path from root:       "/model/a/single-key/*/value"
func (n *Model_SingleKeyPathAny) Value() *Model_SingleKey_ValuePathAny {
	ps := &Model_SingleKey_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPath) State() ygnmi.SingletonQuery[*oc.Model_SingleKey] {
	return ygnmi.NewSingletonQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathAny) State() ygnmi.WildcardQuery[*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPath) Config() ygnmi.ConfigQuery[*oc.Model_SingleKey] {
	return ygnmi.NewConfigQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathAny) Config() ygnmi.WildcardQuery[*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Model_SingleKey](
		"Model",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey](
		"Model",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewConfigQuery[map[string]*oc.Model_SingleKey](
		"Model",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKeyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey](
		"Model",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey, bool) {
			ret := gs.(*oc.Model).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Model_SingleKey_OrderedListPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathMap represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKey_OrderedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type Model_SingleKey_OrderedListPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMap) State() ygnmi.SingletonQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMapAny) State() ygnmi.WildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMap) Config() ygnmi.ConfigQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_OrderedListPathMapAny) Config() ygnmi.WildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.Model_SingleKey_OrderedList_OrderedMap](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.Model_SingleKey_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.Model_SingleKey).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:ordered-lists"},
			PostRelPath: []string{"openconfig-withlistval:ordered-list"},
		},
	)
}

// Model_SingleKey_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKey_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type Model_SingleKey_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewSingletonQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewConfigQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *Model_SingleKey_SingleKeyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.Model_SingleKey_SingleKey] {
	return ygnmi.NewWildcardQuery[map[string]*oc.Model_SingleKey_SingleKey](
		"Model_SingleKey",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.Model_SingleKey_SingleKey, bool) {
			ret := gs.(*oc.Model_SingleKey).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Model_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-withlistval:inner-a"},
			PostRelPath: []string{"openconfig-withlistval:single-key"},
		},
	)
}

// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Package withlistval is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: (devel): (ygot: v0.29.6)
using the following YANG input files:
  - ../../pathgen/testdata/yang/openconfig-simple.yang
  - ../../pathgen/testdata/yang/openconfig-withlistval.yang
  - ../../pathgen/testdata/yang/openconfig-nested.yang

Imported modules were sourced from:
*/
package withlistval

import (
	oc "github.com/openconfig/ygnmi/internal/uexampleoc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// OpenconfigWithlistval_ModelPath represents the /openconfig-withlistval/model YANG schema element.
type OpenconfigWithlistval_ModelPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model]
}

// OpenconfigWithlistval_ModelPathAny represents the wildcard version of the /openconfig-withlistval/model YANG schema element.
type OpenconfigWithlistval_ModelPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model]
}

// A (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a"
//	Path from root:       "/model/a"
func (n *OpenconfigWithlistval_ModelPath) A() *OpenconfigWithlistval_Model_APath {
	ps := &OpenconfigWithlistval_Model_APath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// A (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "a"
//	Path from root:       "/model/a"
func (n *OpenconfigWithlistval_ModelPathAny) A() *OpenconfigWithlistval_Model_APathAny {
	ps := &OpenconfigWithlistval_Model_APathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// B (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b"
//	Path from root:       "/model/b"
func (n *OpenconfigWithlistval_ModelPath) B() *OpenconfigWithlistval_Model_BPath {
	ps := &OpenconfigWithlistval_Model_BPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_B](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// B (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "b"
//	Path from root:       "/model/b"
func (n *OpenconfigWithlistval_ModelPathAny) B() *OpenconfigWithlistval_Model_BPathAny {
	ps := &OpenconfigWithlistval_Model_BPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// C (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c"
//	Path from root:       "/model/c"
func (n *OpenconfigWithlistval_ModelPath) C() *OpenconfigWithlistval_Model_CPath {
	ps := &OpenconfigWithlistval_Model_CPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_C](
		"OpenconfigWithlistval_Model_C",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// C (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "c"
//	Path from root:       "/model/c"
func (n *OpenconfigWithlistval_ModelPathAny) C() *OpenconfigWithlistval_Model_CPathAny {
	ps := &OpenconfigWithlistval_Model_CPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C](
		"OpenconfigWithlistval_Model_C",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_APath represents the /openconfig-withlistval/model/a YANG schema element.
type OpenconfigWithlistval_Model_APath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A]
}

// OpenconfigWithlistval_Model_APathAny represents the wildcard version of the /openconfig-withlistval/model/a YANG schema element.
type OpenconfigWithlistval_Model_APathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A]
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APath) SingleKeyAny() *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// SingleKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APathAny) SingleKeyAny() *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_APath) SingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
//
//	Key: string
func (n *OpenconfigWithlistval_Model_APathAny) SingleKey(Key string) *OpenconfigWithlistval_Model_A_SingleKeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APath) SingleKeyMap() *OpenconfigWithlistval_Model_A_SingleKeyPathMap {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// SingleKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "single-key"
//	Path from root:       "/model/a/single-key"
func (n *OpenconfigWithlistval_Model_APathAny) SingleKeyMap() *OpenconfigWithlistval_Model_A_SingleKeyPathMapAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"single-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey](
		"OpenconfigWithlistval_Model_A",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A).SingleKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) Config() *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) Config() *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// InnerA (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a"
//	Path from root:       "/model/a/single-key/inner-a"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) InnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerAPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerAPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// InnerA (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "inner-a"
//	Path from root:       "/model/a/single-key/inner-a"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) InnerA() *OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inner-a"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OrderedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists"
//	Path from root:       "/model/a/single-key/ordered-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) OrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OrderedLists (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-lists"
//	Path from root:       "/model/a/single-key/ordered-lists"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) OrderedLists() *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-lists"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPath) State() *OpenconfigWithlistval_Model_A_SingleKey_StatePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKeyPathAny) State() *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_ConfigPath represents the /openconfig-withlistval/model/a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerAPath represents the /openconfig-withlistval/model/a/single-key/inner-a YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerAPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerAPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMap represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[string]*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) Config() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) Config() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPath) State() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKeyPathAny) State() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath represents the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/inner-a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/inner-a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_InnerA_SingleKey_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists]
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPath) OrderedListMap() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// OrderedListMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "ordered-list"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedListsPathAny) OrderedListMap() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ordered-list"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists).OrderedList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPath struct {
	*ygnmi.NodePath
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathAny struct {
	*ygnmi.NodePath
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedListPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_OrderedMap]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/config YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPath) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/config/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_ConfigPathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_Config)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath represents the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/ordered-lists/ordered-list/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/ordered-lists/ordered-list/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.OpenconfigWithlistval_Model_A_SingleKey_OrderedLists_OrderedList_State)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath represents the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/key YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath represents the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state/value YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_A_SingleKey_StatePath represents the /openconfig-withlistval/model/a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State]
}

// OpenconfigWithlistval_Model_A_SingleKey_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/a/single-key/state YANG schema element.
type OpenconfigWithlistval_Model_A_SingleKey_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_A_SingleKey_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Key() *OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/a/single-key/state/key"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Key() *OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePath) Value() *OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/a/single-key/state/value"
func (n *OpenconfigWithlistval_Model_A_SingleKey_StatePathAny) Value() *OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_A_SingleKey_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_A_SingleKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_A_SingleKey_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_A_SingleKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_BPath represents the /openconfig-withlistval/model/b YANG schema element.
type OpenconfigWithlistval_Model_BPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_B]
}

// OpenconfigWithlistval_Model_BPathAny represents the wildcard version of the /openconfig-withlistval/model/b YANG schema element.
type OpenconfigWithlistval_Model_BPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_B]
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *OpenconfigWithlistval_Model_BPath) MultiKeyAny() *OpenconfigWithlistval_Model_B_MultiKeyPathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// MultiKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *OpenconfigWithlistval_Model_BPathAny) MultiKeyAny() *OpenconfigWithlistval_Model_B_MultiKeyPathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// WithKey1 sets OpenconfigWithlistval_Model_B_MultiKeyPathAny's key "key1" to the specified value.
// Key1: uint32
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) WithKey1(Key1 uint32) *OpenconfigWithlistval_Model_B_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key1", Key1)
	return n
}

// WithKey2 sets OpenconfigWithlistval_Model_B_MultiKeyPathAny's key "key2" to the specified value.
// Key2: uint64
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) WithKey2(Key2 uint64) *OpenconfigWithlistval_Model_B_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key2", Key2)
	return n
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *OpenconfigWithlistval_Model_BPath) MultiKey(Key1 uint32, Key2 uint64) *OpenconfigWithlistval_Model_B_MultiKeyPath {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// MultiKey (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
//
//	Key1: uint32
//	Key2: uint64
func (n *OpenconfigWithlistval_Model_BPathAny) MultiKey(Key1 uint32, Key2 uint64) *OpenconfigWithlistval_Model_B_MultiKeyPathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *OpenconfigWithlistval_Model_BPath) MultiKeyMap() *OpenconfigWithlistval_Model_B_MultiKeyPathMap {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// MultiKeyMap (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "multi-key"
//	Path from root:       "/model/b/multi-key"
func (n *OpenconfigWithlistval_Model_BPathAny) MultiKeyMap() *OpenconfigWithlistval_Model_B_MultiKeyPathMapAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"multi-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey](
		"OpenconfigWithlistval_Model_B",
		true,
		false,
		false,
		false,
		true,
		ps,
		func(gs ygot.ValidatedGoStruct) (map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B).MultiKey
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_B_MultiKey_Key1Path represents the /openconfig-withlistval/model/b/multi-key/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Key1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_Key1PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Key1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_Key2Path represents the /openconfig-withlistval/model/b/multi-key/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Key2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKey_Key2PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Key2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKeyPath represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKeyPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey]
}

// OpenconfigWithlistval_Model_B_MultiKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey]
}

// OpenconfigWithlistval_Model_B_MultiKeyPathMap represents the /openconfig-withlistval/model/b/multi-key YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKeyPathMap struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey]
}

// OpenconfigWithlistval_Model_B_MultiKeyPathMapAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKeyPathMapAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[map[oc.OpenconfigWithlistval_Model_B_MultiKey_Key]*oc.OpenconfigWithlistval_Model_B_MultiKey]
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/b/multi-key/config"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPath) Config() *OpenconfigWithlistval_Model_B_MultiKey_ConfigPath {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_ConfigPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_Config](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Config (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "config"
//	Path from root:       "/model/b/multi-key/config"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) Config() *OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"config"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_Config](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPath) Key1() *OpenconfigWithlistval_Model_B_MultiKey_Key1Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) Key1() *OpenconfigWithlistval_Model_B_MultiKey_Key1PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPath) Key2() *OpenconfigWithlistval_Model_B_MultiKey_Key2Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) Key2() *OpenconfigWithlistval_Model_B_MultiKey_Key2PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/b/multi-key/state"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPath) State() *OpenconfigWithlistval_Model_B_MultiKey_StatePath {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_State](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/b/multi-key/state"
func (n *OpenconfigWithlistval_Model_B_MultiKeyPathAny) State() *OpenconfigWithlistval_Model_B_MultiKey_StatePathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_State](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_B_MultiKey_Config_Key1Path represents the /openconfig-withlistval/model/b/multi-key/config/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Config_Key1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_Config_Key1PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/config/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Config_Key1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_Config_Key2Path represents the /openconfig-withlistval/model/b/multi-key/config/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Config_Key2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.ConfigQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKey_Config_Key2PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/config/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_Config_Key2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKey_ConfigPath represents the /openconfig-withlistval/model/b/multi-key/config YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_ConfigPath struct {
	*ygnmi.NodePath
	ygnmi.ConfigQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_Config]
}

// OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/config YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_Config]
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/config/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKey_ConfigPath) Key1() *OpenconfigWithlistval_Model_B_MultiKey_Config_Key1Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Config_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_Config).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/config/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny) Key1() *OpenconfigWithlistval_Model_B_MultiKey_Config_Key1PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Config_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_Config).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/config/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKey_ConfigPath) Key2() *OpenconfigWithlistval_Model_B_MultiKey_Config_Key2Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Config_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.ConfigQuery = ygnmi.NewConfigQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_Config).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/config/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKey_ConfigPathAny) Key2() *OpenconfigWithlistval_Model_B_MultiKey_Config_Key2PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_Config_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey_Config",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_Config).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_Config) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_B_MultiKey_State_Key1Path represents the /openconfig-withlistval/model/b/multi-key/state/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_State_Key1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_State_Key1PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/state/key1 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_State_Key1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint32]
}

// OpenconfigWithlistval_Model_B_MultiKey_State_Key2Path represents the /openconfig-withlistval/model/b/multi-key/state/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_State_Key2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKey_State_Key2PathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/state/key2 YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_State_Key2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[uint64]
}

// OpenconfigWithlistval_Model_B_MultiKey_StatePath represents the /openconfig-withlistval/model/b/multi-key/state YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_State]
}

// OpenconfigWithlistval_Model_B_MultiKey_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/b/multi-key/state YANG schema element.
type OpenconfigWithlistval_Model_B_MultiKey_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_B_MultiKey_State]
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/state/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKey_StatePath) Key1() *OpenconfigWithlistval_Model_B_MultiKey_State_Key1Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_State_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_State).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key1 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key1"
//	Path from root:       "/model/b/multi-key/state/key1"
func (n *OpenconfigWithlistval_Model_B_MultiKey_StatePathAny) Key1() *OpenconfigWithlistval_Model_B_MultiKey_State_Key1PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_State_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint32](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_State).Key1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/state/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKey_StatePath) Key2() *OpenconfigWithlistval_Model_B_MultiKey_State_Key2Path {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_State_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_State).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key2 (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key2"
//	Path from root:       "/model/b/multi-key/state/key2"
func (n *OpenconfigWithlistval_Model_B_MultiKey_StatePathAny) Key2() *OpenconfigWithlistval_Model_B_MultiKey_State_Key2PathAny {
	ps := &OpenconfigWithlistval_Model_B_MultiKey_State_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[uint64](
		"OpenconfigWithlistval_Model_B_MultiKey_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_B_MultiKey_State).Key2
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_B_MultiKey_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_CPath represents the /openconfig-withlistval/model/c YANG schema element.
type OpenconfigWithlistval_Model_CPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C]
}

// OpenconfigWithlistval_Model_CPathAny represents the wildcard version of the /openconfig-withlistval/model/c YANG schema element.
type OpenconfigWithlistval_Model_CPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C]
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "no-key"
//	Path from root:       "/model/c/no-key"
func (n *OpenconfigWithlistval_Model_CPath) NoKeyAny() *OpenconfigWithlistval_Model_C_NoKeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"no-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey](
		"OpenconfigWithlistval_Model_C_NoKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// NoKeyAny (list):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "no-key"
//	Path from root:       "/model/c/no-key"
func (n *OpenconfigWithlistval_Model_CPathAny) NoKeyAny() *OpenconfigWithlistval_Model_C_NoKeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"no-key"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey](
		"OpenconfigWithlistval_Model_C_NoKey",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_C_NoKeyPath represents the /openconfig-withlistval/model/c/no-key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKeyPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey]
}

// OpenconfigWithlistval_Model_C_NoKeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKeyPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey]
}

// OpenconfigWithlistval_Model_C_NoKey_FooPath represents the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_FooPath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo]
}

// OpenconfigWithlistval_Model_C_NoKey_FooPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_FooPathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo]
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/c/no-key/foo/state"
func (n *OpenconfigWithlistval_Model_C_NoKey_FooPath) State() *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// State (container):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "state"
//	Path from root:       "/model/c/no-key/foo/state"
func (n *OpenconfigWithlistval_Model_C_NoKey_FooPathAny) State() *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state"},
			map[string]interface{}{},
			n,
		),
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		false,
		false,
		false,
		false,
		ps,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath represents the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[string]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/key YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[string]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath represents the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.SingletonQuery[int64]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state/value YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
	ygnmi.WildcardQuery[int64]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath represents the /openconfig-withlistval/model/c/no-key/foo/state YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath struct {
	*ygnmi.NodePath
	ygnmi.SingletonQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State]
}

// OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny represents the wildcard version of the /openconfig-withlistval/model/c/no-key/foo/state YANG schema element.
type OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny struct {
	*ygnmi.NodePath
	ygnmi.WildcardQuery[*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State]
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath) Key() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[string](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Key (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "key"
//	Path from root:       "/model/c/no-key/foo/state/key"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny) Key() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[string](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Key
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePath) Value() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.SingletonQuery = ygnmi.NewSingletonQuery[int64](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)

	return ps
}

// Value (leaf):
//
//	Defining module:      "openconfig-withlistval"
//	Instantiating module: "openconfig-withlistval"
//	Path from parent:     "value"
//	Path from root:       "/model/c/no-key/foo/state/value"
func (n *OpenconfigWithlistval_Model_C_NoKey_Foo_StatePathAny) Value() *OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny {
	ps := &OpenconfigWithlistval_Model_C_NoKey_Foo_State_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	ps.WildcardQuery = ygnmi.NewWildcardQuery[int64](
		"OpenconfigWithlistval_Model_C_NoKey_Foo_State",
		true,
		true,
		true,
		false,
		false,
		ps,
		func(gs ygot.ValidatedGoStruct) (int64, bool) {
			ret := gs.(*oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State).Value
			if ret == nil {
				var zero int64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.OpenconfigWithlistval_Model_C_NoKey_Foo_State) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)

	return ps
}

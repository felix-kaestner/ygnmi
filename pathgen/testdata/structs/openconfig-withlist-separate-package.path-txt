/*
Package ocstructs is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-withlist.yang
Imported modules were sourced from:
*/
package ocstructs

import (
	"reflect"
	oc "github.com/openconfig/ygot/ypathgen/testdata/exampleoc"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// Device represents the /device YANG schema element.
type Device struct {
	*ygnmi.DeviceRootBase
}

// Root returns a root path object from which YANG paths can be constructed.
func Root() *Device {
	return &Device{ygnmi.NewDeviceRootBase()}
}

// Model (container): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "model"
// 	Path from root:       "/model"
func (n *Device) Model() *Model {
	return &Model{
		NodePath: ygnmi.NewNodePath(
			[]string{"model"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model represents the /openconfig-withlist/model YANG schema element.
type Model struct {
	*ygnmi.NodePath
}

// ModelAny represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelAny struct {
	*ygnmi.NodePath
}

// AtomicListMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-lists/atomic-list"
// 	Path from root:       "/model/atomic-lists/atomic-list"
func (n *Model) AtomicListMap() *Model_AtomicListMap {
	return &Model_AtomicListMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-lists"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicListMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-lists/atomic-list"
// 	Path from root:       "/model/atomic-lists/atomic-list"
func (n *ModelAny) AtomicListMap() *Model_AtomicListMapAny {
	return &Model_AtomicListMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-lists"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicListElementAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *Model) AtomicListElementAny() *Model_AtomicListElementAny {
	return &Model_AtomicListElementAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// AtomicListElementAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelAny) AtomicListElementAny() *Model_AtomicListElementAny {
	return &Model_AtomicListElementAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// AtomicListElement (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
//
// 	Key: string
func (n *Model) AtomicListElement(Key string) *Model_AtomicListElement {
	return &Model_AtomicListElement{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// AtomicListElement (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
//
// 	Key: string
func (n *ModelAny) AtomicListElement(Key string) *Model_AtomicListElementAny {
	return &Model_AtomicListElementAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements", "atomic-list-element"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// AtomicListElementMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *Model) AtomicListElementMap() *Model_AtomicListElementMap {
	return &Model_AtomicListElementMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements"},
			map[string]interface{}{},
			n,
		),
	}
}

// AtomicListElementMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "atomic-list-elements/atomic-list-element"
// 	Path from root:       "/model/atomic-list-elements/atomic-list-element"
func (n *ModelAny) AtomicListElementMap() *Model_AtomicListElementMapAny {
	return &Model_AtomicListElementMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"atomic-list-elements"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *Model) MultiKeyAny() *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelAny) MultiKeyAny() *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// WithKey1 sets Model_MultiKeyAny's key "key1" to the specified value.
// Key1: uint32
func (n *Model_MultiKeyAny) WithKey1(Key1 uint32) *Model_MultiKeyAny {
	ygnmi.ModifyKey(n.NodePath, "key1", Key1)
	return n
}

// WithKey2 sets Model_MultiKeyAny's key "key2" to the specified value.
// Key2: uint64
func (n *Model_MultiKeyAny) WithKey2(Key2 uint64) *Model_MultiKeyAny {
	ygnmi.ModifyKey(n.NodePath, "key2", Key2)
	return n
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *Model) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKey {
	return &Model_MultiKey{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *ModelAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyAny {
	return &Model_MultiKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *Model) MultiKeyMap() *Model_MultiKeyMap {
	return &Model_MultiKeyMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelAny) MultiKeyMap() *Model_MultiKeyMapAny {
	return &Model_MultiKeyMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *Model) NoKeyAny() *Model_NoKeyAny {
	return &Model_NoKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *ModelAny) NoKeyAny() *Model_NoKeyAny {
	return &Model_NoKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *Model) SingleKeyAny() *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelAny) SingleKeyAny() *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *Model) SingleKey(Key string) *Model_SingleKey {
	return &Model_SingleKey{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *ModelAny) SingleKey(Key string) *Model_SingleKeyAny {
	return &Model_SingleKeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *Model) SingleKeyMap() *Model_SingleKeyMap {
	return &Model_SingleKeyMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelAny) SingleKeyMap() *Model_SingleKeyMapAny {
	return &Model_SingleKeyMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_AtomicList represents the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicList struct {
	*ygnmi.NodePath
}

// Model_AtomicListAny represents the wildcard version of the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element.
type Model_AtomicListAny struct {
	*ygnmi.NodePath
}

// Model_AtomicListMap represents the version of the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element
// that references the entire keyed list as a map.
type Model_AtomicListMap struct {
	*ygnmi.NodePath
}

// Model_AtomicListMapAny represents the wildcard version of the /openconfig-withlist/model/atomic-lists/atomic-list YANG schema element
// that references the entire keyed list as a map.
type Model_AtomicListMapAny struct {
	*ygnmi.NodePath
}

// Model_AtomicListElement represents the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElement struct {
	*ygnmi.NodePath
}

// Model_AtomicListElementAny represents the wildcard version of the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element.
type Model_AtomicListElementAny struct {
	*ygnmi.NodePath
}

// Model_AtomicListElementMap represents the version of the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element
// that references the entire keyed list as a map.
type Model_AtomicListElementMap struct {
	*ygnmi.NodePath
}

// Model_AtomicListElementMapAny represents the wildcard version of the /openconfig-withlist/model/atomic-list-elements/atomic-list-element YANG schema element
// that references the entire keyed list as a map.
type Model_AtomicListElementMapAny struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key1 represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1 struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key1Any represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Any struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key2 represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2 struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key2Any represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Any struct {
	*ygnmi.NodePath
}

// Model_MultiKey represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKey struct {
	*ygnmi.NodePath
}

// Model_MultiKeyAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyAny struct {
	*ygnmi.NodePath
}

// Model_MultiKeyMap represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyMap struct {
	*ygnmi.NodePath
}

// Model_MultiKeyMapAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyMapAny struct {
	*ygnmi.NodePath
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKey) Key1() *Model_MultiKey_Key1 {
	return &Model_MultiKey_Key1{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyAny) Key1() *Model_MultiKey_Key1Any {
	return &Model_MultiKey_Key1Any{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKey) Key2() *Model_MultiKey_Key2 {
	return &Model_MultiKey_Key2{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyAny) Key2() *Model_MultiKey_Key2Any {
	return &Model_MultiKey_Key2Any{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_NoKey represents the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKey struct {
	*ygnmi.NodePath
}

// Model_NoKeyAny represents the wildcard version of the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKeyAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_Key represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_Key struct {
	*ygnmi.NodePath
}

// Model_SingleKey_KeyAny represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKey struct {
	*ygnmi.NodePath
}

// Model_SingleKeyAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyAny struct {
	*ygnmi.NodePath
}

// Model_SingleKeyMap represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyMap struct {
	*ygnmi.NodePath
}

// Model_SingleKeyMapAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyMapAny struct {
	*ygnmi.NodePath
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKey) Key() *Model_SingleKey_Key {
	return &Model_SingleKey_Key{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKeyAny) Key() *Model_SingleKey_KeyAny {
	return &Model_SingleKey_KeyAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

/*
Package openconfigwithlistpath is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema. The generated paths are
based on a compressed form of the schema.

This package was generated by pathgen-tests
using the following YANG input files:
	- testdata/yang/openconfig-withlist.yang
Imported modules were sourced from:
*/
package openconfigwithlistpath

import (
	"reflect"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygnmi/ygmni"
	"github.com/openconfig/ygot/ytypes"
)

// ModelPath represents the /openconfig-withlist/model YANG schema element.
type ModelPath struct {
	*ygnmi.NodePath
}

// ModelPathAny represents the wildcard version of the /openconfig-withlist/model YANG schema element.
type ModelPathAny struct {
	*ygnmi.NodePath
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyAny() *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// MultiKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyAny() *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": "*", "key2": "*"},
			n,
		),
	}
}

// WithKey1 sets Model_MultiKeyPathAny's key "key1" to the specified value.
// Key1: uint32
func (n *Model_MultiKeyPathAny) WithKey1(Key1 uint32) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key1", Key1)
	return n
}

// WithKey2 sets Model_MultiKeyPathAny's key "key2" to the specified value.
// Key2: uint64
func (n *Model_MultiKeyPathAny) WithKey2(Key2 uint64) *Model_MultiKeyPathAny {
	ygnmi.ModifyKey(n.NodePath, "key2", Key2)
	return n
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *ModelPath) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPath {
	return &Model_MultiKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
//
// 	Key1: uint32
// 	Key2: uint64
func (n *ModelPathAny) MultiKey(Key1 uint32, Key2 uint64) *Model_MultiKeyPathAny {
	return &Model_MultiKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b", "multi-key"},
			map[string]interface{}{"key1": Key1, "key2": Key2},
			n,
		),
	}
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPath) MultiKeyMap() *Model_MultiKeyPathMap {
	return &Model_MultiKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// MultiKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "b/multi-key"
// 	Path from root:       "/model/b/multi-key"
func (n *ModelPathAny) MultiKeyMap() *Model_MultiKeyPathMapAny {
	return &Model_MultiKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"b"},
			map[string]interface{}{},
			n,
		),
	}
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *ModelPath) NoKeyAny() *Model_NoKeyPathAny {
	return &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// NoKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "c/no-key"
// 	Path from root:       "/model/c/no-key"
func (n *ModelPathAny) NoKeyAny() *Model_NoKeyPathAny {
	return &Model_NoKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"c", "no-key"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyAny() *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKeyAny (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyAny() *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": "*"},
			n,
		),
	}
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *ModelPath) SingleKey(Key string) *Model_SingleKeyPath {
	return &Model_SingleKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKey (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
//
// 	Key: string
func (n *ModelPathAny) SingleKey(Key string) *Model_SingleKeyPathAny {
	return &Model_SingleKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a", "single-key"},
			map[string]interface{}{"key": Key},
			n,
		),
	}
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPath) SingleKeyMap() *Model_SingleKeyPathMap {
	return &Model_SingleKeyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// SingleKeyMap (list): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "a/single-key"
// 	Path from root:       "/model/a/single-key"
func (n *ModelPathAny) SingleKeyMap() *Model_SingleKeyPathMapAny {
	return &Model_SingleKeyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"a"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_MultiKey_Key1Path represents the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1Path struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key1PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key1 YANG schema element.
type Model_MultiKey_Key1PathAny struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key2Path represents the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2Path struct {
	*ygnmi.NodePath
}

// Model_MultiKey_Key2PathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key/state/key2 YANG schema element.
type Model_MultiKey_Key2PathAny struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPath represents the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPath struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element.
type Model_MultiKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathMap represents the version of the /openconfig-withlist/model/b/multi-key YANG schema element
// that references the entire keyed list as a map.
type Model_MultiKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_MultiKeyPathMapAny represents the wildcard version of the /openconfig-withlist/model/b/multi-key YANG schema element
// that references the entire keyed list as a map.
type Model_MultiKeyPathMapAny struct {
	*ygnmi.NodePath
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPath) Key1() *Model_MultiKey_Key1Path {
	return &Model_MultiKey_Key1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key1 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key1"
// 	Path from root:       "/model/b/multi-key/state/key1"
func (n *Model_MultiKeyPathAny) Key1() *Model_MultiKey_Key1PathAny {
	return &Model_MultiKey_Key1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key1"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPath) Key2() *Model_MultiKey_Key2Path {
	return &Model_MultiKey_Key2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key2 (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key2"
// 	Path from root:       "/model/b/multi-key/state/key2"
func (n *Model_MultiKeyPathAny) Key2() *Model_MultiKey_Key2PathAny {
	return &Model_MultiKey_Key2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key2"},
			map[string]interface{}{},
			n,
		),
	}
}

// Model_NoKeyPath represents the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKeyPath struct {
	*ygnmi.NodePath
}

// Model_NoKeyPathAny represents the wildcard version of the /openconfig-withlist/model/c/no-key YANG schema element.
type Model_NoKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKey_KeyPath represents the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKey_KeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key/state/key YANG schema element.
type Model_SingleKey_KeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPath represents the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPath struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element.
type Model_SingleKeyPathAny struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMap represents the version of the /openconfig-withlist/model/a/single-key YANG schema element
// that references the entire keyed list as a map.
type Model_SingleKeyPathMap struct {
	*ygnmi.NodePath
}

// Model_SingleKeyPathMapAny represents the wildcard version of the /openconfig-withlist/model/a/single-key YANG schema element
// that references the entire keyed list as a map.
type Model_SingleKeyPathMapAny struct {
	*ygnmi.NodePath
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKeyPath) Key() *Model_SingleKey_KeyPath {
	return &Model_SingleKey_KeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}

// Key (leaf): 
// 	Defining module:      "openconfig-withlist"
// 	Instantiating module: "openconfig-withlist"
// 	Path from parent:     "state/key"
// 	Path from root:       "/model/a/single-key/state/key"
func (n *Model_SingleKeyPathAny) Key() *Model_SingleKey_KeyPathAny {
	return &Model_SingleKey_KeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "key"},
			map[string]interface{}{},
			n,
		),
	}
}
